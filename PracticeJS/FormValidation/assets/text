function Validator(options) {
    var formElement = document.querySelector(options.form);
    var selectorRules = {};

    function getParentElement(element, selector) {
        while(element.parentElement) {
            if(element.parentElement.matches(selector)) {
                return element.parentElement;
            }
            element = element.parentElement;
        }
    };


    function validate(inputElement, rule) {
        var errorMessage;
        var errorText =getParentElement(inputElement, options.formGroupElement).querySelector(options.errorSelector);

        // console.log(selectorRules);

        // lấy ra từng rule của input selector
        var ruleElement = selectorRules[rule.selector];
        // console.log(ruleElement);
        
        for (var i = 0; i <ruleElement.length; i++) {
            errorMessage = ruleElement[i](inputElement.value);
            if(errorMessage) {
                break;
            }
        }

        if(errorMessage) {
            errorText.innerText = errorMessage;
            getParentElement(inputElement, options.errorSelector).classList.add('invalid');
        } else {
            errorText.innerText = '';
            getParentElement(inputElement, options.errorSelector).classList.remove('invalid');
        }
        return !errorMessage;
    }

    if(formElement) {

        formElement.onsubmit = (event) => {
            event.preventDefault();

            var isError = true;

            options.rules.forEach(rule =>{
                var inputElement = formElement.querySelector(rule.selector);
                
                var isValid = validate(inputElement, rule);

                if(!isValid) {
                    isError = false;
                }
            });
            
            if(isError) {
                if(typeof options.onSubmit === 'function') {
                    // Trường hợp submit với js
                    var emptyInput = formElement.querySelectorAll('[name]');
                    var formValues = Array.from(emptyInput).reduce((value, input) => {
                        value[input.name] = input.value
                        return value;
                    }, {});
                    options.onSubmit(formValues);
                } else {
                    // Trường hợp submit với hành vi mặc định
                    formElement.submit();
                }
            } 
        };

        // lặp qua từng rules và lắng nghe sự kiện
        options.rules.forEach(rule => {

            if(Array.isArray(selectorRules[rule.selector])) {
                selectorRules[rule.selector].push(rule.test);
            } else {
                // khi selectorRules không phải là mảng thì gán cho nó bằng một mảng
                // với phần tử là rule đầu tiên
                selectorRules[rule.selector] = [rule.test];
            }

            var inputElement = formElement.querySelector(rule.selector);

            if(inputElement) {
                inputElement.onblur = () => {
                    validate(inputElement, rule);
                }

                // Nhập dữ liệu vào input, gỡ bỏ class invalid
                inputElement.oninput = () => {
                    var errorText =getParentElement(inputElement, options.formGroupElement).querySelector(options.errorSelector);
                    errorText.innerText = '';
                    getParentElement(inputElement, options.formGroupElement).classList.remove('invalid');
                }
            }
            // console.log(selectorRules);
        });
    }
}

Validator.isRequired = function(selector) {
    return {
        selector,
        test: function(value) {
            return value.trim() ? undefined : 'Vui long nhap truong nay!';
        }
    }
};

Validator.isEmail = function(selector) {
    return {
        selector,
        test: function(value) {
            var regexEmail = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
            return regexEmail.test(value) ? undefined : 'Thong tin nhap khong hop le!';
        }
    }
};

Validator.minLength = function(selector, min) {
    return {
        selector,
        test: function(value) {
            return value.length >= min ? undefined : `Vui long nhap ${min} ki tu`;
        }
    }
};

Validator.isConfirm = function(selector, getPassword, message) {
    return {
        selector,
        test: function(value) {
            return value === getPassword() ? undefined : message || 'Du lieu nhap vao khong chinh xac';
        }
    }
};